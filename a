[1mdiff --git a/components/books/bookController.js b/components/books/bookController.js[m
[1mindex 34fd79d..f373e05 100644[m
[1m--- a/components/books/bookController.js[m
[1m+++ b/components/books/bookController.js[m
[36m@@ -33,94 +33,8 @@[m [mconst getGenres = async (req, res) => {[m
   }[m
 };[m
 [m
[31m-const getAuthors = async (req, res) => {[m
[31m-  try {[m
[31m-    const authors = await bookService.getAuthors();[m
[31m-    res.render('authors', { authors }); // Render Ä‘Ãºng template authors[m
[31m-  } catch (error) {[m
[31m-    res.status(500).send('Error fetching authors');[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-const getPrices = async (req, res) => {[m
[31m-  try {[m
[31m-    const ratings = await bookService.getPrices();[m
[31m-    res.render('prices', { prices }); [m
[31m-  } catch (error) {[m
[31m-    res.status(500).send('Error fetching prices');[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-const filterBooks = async (req, res) => {[m
[31m-  try {[m
[31m-    const { genre, author, purchaseCount, price, searchText } = req.body;[m
[31m-    const filters = {};[m
[31m-[m
[31m-    if (genre && genre !== '') filters.genre = genre;[m
[31m-    if (author && author !== '') filters.author = author;[m
[31m-    [m
[31m-    // Xá»­ lÃ½ purchaseCount ranges[m
[31m-    if (purchaseCount && purchaseCount !== '') {[m
[31m-      const [minSold, maxSold] = purchaseCount.split('-').map(Number);[m
[31m-      filters.sold = { [m
[31m-        $gte: minSold, [m
[31m-        $lte: maxSold || Infinity [m
[31m-      };[m
[31m-    }[m
[31m-[m
[31m-    // Xá»­ lÃ½ price ranges[m
[31m-    if (price && price !== '') {[m
[31m-      const [minPrice, maxPrice] = price.split('-').map(Number);[m
[31m-      filters.price = {[m
[31m-        $gte: minPrice,[m
[31m-        $lte: maxPrice || Infinity[m
[31m-      };[m
[31m-    }[m
[31m-[m
[31m-    // Xá»­ lÃ½ tÃ¬m kiáº¿m theo searchText[m
[31m-    if (searchText && searchText !== '') {[m
[31m-      filters.$or = [[m
[31m-        { title: { $regex: searchText, $options: 'i' } },[m
[31m-        { description: { $regex: searchText, $options: 'i' } }[m
[31m-      ];[m
[31m-    }[m
[31m-[m
[31m-    const books = await bookService.filterBooks(filters);[m
[31m-    res.json(books);[m
[31m-  } catch (error) {[m
[31m-    console.error('Error filtering books:', error);[m
[31m-    res.status(500).json({ error: 'Error filtering books' });[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-const searchBooks = async (req, res) => {[m
[31m-  try {[m
[31m-    const { searchText } = req.body;[m
[31m-    const books = await bookService.searchBooks(searchText);[m
[31m-    res.json(books);[m
[31m-  } catch (error) {[m
[31m-    console.error('Error searching books:', error);[m
[31m-    res.status(500).json({ error: 'Error searching books' });[m
[31m-  }[m
[31m-};[m
[31m-const searchAndFilterBooks = async (req, res) => {[m
[31m-  try {[m
[31m-    const { genre, author, purchaseCount, price, searchText } = req.body;[m
[31m-    const books = await bookService.searchAndFilterBooks({ genre, author, purchaseCount, price, searchText });[m
[31m-    res.json(books);[m
[31m-  } catch (error) {[m
[31m-    console.error('Error searching and filtering books:', error);[m
[31m-    res.status(500).json({ error: 'Error searching and filtering books' });[m
[31m-  }[m
[31m-};[m
 module.exports = {[m
   getBooks,[m
   getBookById,[m
   getGenres,[m
[31m-  getAuthors,[m
[31m-  getPrices,[m
[31m-  filterBooks,  [m
[31m-  searchBooks,[m
[31m-  searchAndFilterBooks[m
[31m-  [m
 };[m
[1mdiff --git a/components/books/bookRoutes.js b/components/books/bookRoutes.js[m
[1mindex aed4e12..ad248d9 100644[m
[1m--- a/components/books/bookRoutes.js[m
[1m+++ b/components/books/bookRoutes.js[m
[36m@@ -5,12 +5,7 @@[m [mconst bookController = require('./bookController');[m
 const router = express.Router();[m
 [m
 router.get('/genres', bookController.getGenres);[m
[31m-router.get('/authors', bookController.getAuthors);[m
[31m-router.get('/prices', bookController.getAuthors);[m
 router.get('/', bookController.getBooks);[m
[31m-router.post('/filter-books', bookController.filterBooks);[m
[31m-router.post('/search', bookController.searchBooks); [m
[31m-router.post('/search-and-filter', bookController.searchAndFilterBooks);[m
 router.get('/:id', bookController.getBookById);[m
 [m
 module.exports = router;[m
[1mdiff --git a/components/books/bookService.js b/components/books/bookService.js[m
[1mindex cc75b01..c01e036 100644[m
[1m--- a/components/books/bookService.js[m
[1m+++ b/components/books/bookService.js[m
[36m@@ -1,22 +1,9 @@[m
 // components/books/services/bookService.js[m
 const Book = require('../../models/Book');[m
 [m
[31m-const getAllBooks = async (genre, author, price, purchaseCount) => {[m
[32m+[m[32mconst getAllBooks = async () => {[m
   try {[m
[31m-    const filters = {};[m
[31m-[m
[31m-    if (genre) filters.genre = genre;[m
[31m-    if (author) filters.author = author;[m
[31m-    if (purchaseCount) {[m
[31m-      const [minSold, maxSold] = purchaseCount.split('-').map(Number);[m
[31m-      filters.sold = { $gte: minSold, $lte: maxSold || Infinity };[m
[31m-    }[m
[31m-    if (price) {[m
[31m-      const [minPrice, maxPrice] = price.split('-').map(Number);[m
[31m-      filters.price = { $gte: minPrice, $lte: maxPrice || Infinity };[m
[31m-    }[m
[31m-[m
[31m-    const books = await Book.find(filters);[m
[32m+[m[32m    const books = await Book.find();[m
     return books;[m
   } catch (error) {[m
     throw new Error('Error fetching books');[m
[36m@@ -25,7 +12,7 @@[m [mconst getAllBooks = async (genre, author, price, purchaseCount) => {[m
 [m
 const getBookById = async (id) => {[m
   try {[m
[31m-    const book = await Book.findOne({ id });[m
[32m+[m[32m    const book = await Book.findOne({id: id});[m
     return book;[m
   } catch (error) {[m
     throw new Error('Error fetching book');[m
[36m@@ -41,75 +28,16 @@[m [mconst getGenres = async () => {[m
   }[m
 };[m
 [m
[31m-const getAuthors = async () => {[m
[31m-  try {[m
[31m-    const authors = await Book.distinct('author');[m
[31m-    return authors;[m
[31m-  } catch (error) {[m
[31m-    throw new Error('Error fetching authors');[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-const getPrices = async () => {[m
[31m-  try {[m
[31m-    const prices = await Book.distinct('price');[m
[31m-    return prices;[m
[31m-  } catch (error) {[m
[31m-    throw new Error('Error fetching prices');[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-[m
[31m-[m
[31m-const filterBooks = async (filters) => {[m
[31m-  try {[m
[31m-    const books = await Book.find(filters);[m
[31m-    return books;[m
[31m-  } catch (error) {[m
[31m-    throw new Error('Error filtering books');[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-const searchBooks = async (searchText) => {[m
[32m+[m[32mconst getRelatedBooks = async (genre, bookId) => {[m
   try {[m
[31m-    const searchTerms = searchText.split(' ').map(term => new RegExp(term, 'i'));[m
[31m-    const books = await Book.find({[m
[31m-      $or: [[m
[31m-        { title: { $in: searchTerms } },[m
[31m-        { description: { $in: searchTerms } }[m
[31m-      ][m
[31m-    });[m
[32m+[m[32m    const books = await Book.aggregate([[m
[32m+[m[32m      { $match: { genre: genre, _id: { $ne: bookId } } },[m
[32m+[m[32m      { $sample: { size: 6 } }[m
[32m+[m[32m    ]);[m
     return books;[m
[31m-  } catch (error) {[m
[31m-    throw new Error('Error searching books');[m
   }[m
[31m-};[m
[31m-const searchAndFilterBooks = async ({ genre, author, purchaseCount, price, searchText }) => {[m
[31m-  try {[m
[31m-    const filters = {};[m
[31m-[m
[31m-    if (genre) filters.genre = genre;[m
[31m-    if (author) filters.author = author;[m
[31m-    if (purchaseCount) {[m
[31m-      const [minSold, maxSold] = purchaseCount.split('-').map(Number);[m
[31m-      filt